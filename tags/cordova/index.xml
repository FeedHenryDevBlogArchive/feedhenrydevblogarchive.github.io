<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cordova on Archive of FeedHenry Developer Blog 2012-2016</title>
    <link>http://feedhenrydevblogarchive.github.io/tags/cordova/</link>
    <description>Recent content in Cordova on Archive of FeedHenry Developer Blog 2012-2016</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Aug 2014 08:36:01 +0000</lastBuildDate>
    <atom:link href="http://feedhenrydevblogarchive.github.io/tags/cordova/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Extending the Cordova Mobile Spec Tester App into the Cloud</title>
      <link>http://feedhenrydevblogarchive.github.io/extending-cordova-mobile-spec-tester-app-cloud/</link>
      <pubDate>Fri, 29 Aug 2014 08:36:01 +0000</pubDate>
      
      <guid>http://feedhenrydevblogarchive.github.io/extending-cordova-mobile-spec-tester-app-cloud/</guid>
      <description>&lt;p&gt;Here at FeedHenry we&amp;rsquo;re big fans of &lt;a href=&#34;http://cordova.apache.org/&#34;&gt;Apache Cordova&lt;/a&gt; - the leading Hybrid App Development Framework - and have been supporting it in our Mobile App Platform for several years now. Over that time, we have upgraded our supported version of Cordova many times (we first started supported cordova at version 0.9). One of the core parts of the FeedHenry product offering is our Cloud Hosted &lt;a href=&#34;http://www.feedhenry.com/mobile-application-platform/app-development/&#34;&gt;Build Farm&lt;/a&gt; which &amp;ldquo;&amp;hellip;provides builds for native and hybrid apps for iOS, Android, Windows Phone and Blackberry, generating the build and digitally signing the apps&amp;rdquo;. As we maintain and upgrade the Build Farm - to support new versions of Cordova, new versions and flavours of mobile Operating Systems (iOS 8 support Coming Soon) - a crucial task is to ensure that we do not break support for any device APIs. To assist with this, we have found the &lt;a href=&#34;https://github.com/apache/cordova-mobile-spec&#34;&gt;Cordova Mobile Spec App&lt;/a&gt; to be an excellent tool. It is &amp;ldquo;a set of automated &amp;amp; manual tests that test Cordova core functionality&amp;rdquo; which allow us to manually verify API functionality on various devices and mobile OS versions pre and post upgrade. However, there are a few limitations to this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Testing the full API set is a somewhat manual process&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is no information/history of previous tests - details of test failures need to be manually recorded&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There is no statistical information available on which tests fail most often on which mobile operating systems&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By using the FeedHenry platform, we were quickly able to deal with these limitations and turn a stand alone app into one part of a Cloud Powered Mobile Solution. Here&amp;rsquo;s what we did: First, we forked the Mobile Spec App into the GitHub organisation we use for &lt;a href=&#34;https://github.com/feedhenry-templates/fh-mobile-spec-app&#34;&gt;template apps&lt;/a&gt; and added the &lt;a href=&#34;http://docs.feedhenry.com/v3/dev_tools/sdks/cordova.html&#34;&gt;FeedHenry Cordova SDK&lt;/a&gt;. This allowed the mobile app to communicate with the FeedHenry Cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/2014-08-27-12.00.11.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/2014-08-27-12.00.11-168x300.png&#34; alt=&#34;2014-08-27 12.00.11&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we created a standard &lt;a href=&#34;https://github.com/feedhenry-templates/fh-mobile-spec-cloud&#34;&gt;FeedHenry  Node.js Cloud Application&lt;/a&gt; for the Mobile Spec App to submit it test results to. &lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/App-Cloud-API-Docs.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/App-Cloud-API-Docs-947x1024.png&#34; alt=&#34;App Cloud API Docs&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we added a &lt;a href=&#34;http://jasmine.github.io/&#34;&gt;Jasmine test runner&lt;/a&gt; to the Mobile App to allow the full suite of API test to be run automatically &amp;amp; uploaded the results to the Node.js Cloud App using the standard &lt;a href=&#34;http://docs.feedhenry.com/v3/api/api_act.html&#34;&gt;$fh.cloud() API call&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/2014-08-27-12.00.59-168x300.png&#34; alt=&#34;2014-08-27 12.00.59&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we created a &lt;a href=&#34;https://github.com/feedhenry-templates/fh-mobile-spec-portal&#34;&gt;FeedHenry Web Portal&lt;/a&gt; (also powered by Node.js) to allow the test results from individual runs of the app on any mobile device to be viewed, sorted, searched, aggregated and graphed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.44.23.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.44.23-300x121.png&#34; alt=&#34;Screenshot 2014-08-25 17.44.23&#34; /&gt;&lt;/a&gt;   &lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.44.41.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.44.41-300x160.png&#34; alt=&#34;Screenshot 2014-08-25 17.44.41&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.45.08.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.45.08-300x160.png&#34; alt=&#34;Screenshot 2014-08-25 17.45.08&#34; /&gt;&lt;/a&gt;   &lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.45.27.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.45.27-300x158.png&#34; alt=&#34;Screenshot 2014-08-25 17.45.27&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.45.46.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.45.46-300x145.png&#34; alt=&#34;Screenshot 2014-08-25 17.45.46&#34; /&gt;&lt;/a&gt;   &lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.46.25.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-25-17.46.25-300x151.png&#34; alt=&#34;Screenshot 2014-08-25 17.46.25&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result -  a full mobility project for automated Cordova API Testing which persists, aggregates and visualises test data for the Cordova Mobile Spec App. This project is available as one of our standard FeedHenry 3 templates, so feel free to take a look and use it for your own automated testing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-27-12.53.12.png&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-27-12.53.12-300x200.png&#34; alt=&#34;Screenshot 2014-08-27 12.53.12&#34; /&gt;   &lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/Screenshot-2014-08-27-12.53.32-300x124.png&#34; alt=&#34;Screenshot 2014-08-27 12.53.32&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Several ways to avoid problems with the Cordova File API in your mobile apps</title>
      <link>http://feedhenrydevblogarchive.github.io/several-ways-avoid-problems-cordova-file-api-mobile-apps/</link>
      <pubDate>Wed, 06 Aug 2014 09:22:48 +0000</pubDate>
      
      <guid>http://feedhenrydevblogarchive.github.io/several-ways-avoid-problems-cordova-file-api-mobile-apps/</guid>
      <description>

&lt;p&gt;The Cordova File API is one of the most widely used APIs when developing Cordova apps (Ranked as the No.3 the most downloaded plugin on the Cordova plugin registry). It implements the &lt;a href=&#34;http://www.w3.org/TR/FileAPI/&#34;&gt;W3C File API&lt;/a&gt; for hybrid mobile apps. However, due to the complexity of the W3C specification, and the fact that each mobile OS handles file system for apps differently, the File API itself is quite complicated compared to other Cordova APIs. If you are planning to use the File API in your apps, you should read this &lt;a href=&#34;http://www.html5rocks.com/en/tutorials/file/filesystem/&#34;&gt;excellent article on html5rocks&lt;/a&gt; about how to use it. However, there are a few other things you should be aware of. In this post, I would like summarize some of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cordova.apache.org/&#34;&gt;&lt;img src=&#34;http://feedhenrydevblogarchive.github.io/wp-content/uploads/2014/08/cordova_logo_normal_dark-300x133.png&#34; alt=&#34;cordova_logo_normal_dark&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;requesting-the-file-system-after-cordova-is-ready&#34;&gt;Requesting the file system after Cordova is ready&lt;/h2&gt;

&lt;p&gt;You probably think that we don&amp;rsquo;t need to remind you about this because it is the first thing you will learn when using Cordova.&lt;/p&gt;

&lt;p&gt;Well, the thing is that if your app is using third party libraries, and they are not explicitly designed for Cordova apps, there is a chance that it may not use the API in the &amp;ldquo;Cordova way&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For example, we have used the &lt;a href=&#34;http://brian.io/lawnchair/&#34;&gt;Lawnchair&lt;/a&gt; library in one of the projects. To use it with the file system, we use the &lt;a href=&#34;https://github.com/brianleroux/lawnchair/blob/master/src/adapters/html5-filesystem.js&#34;&gt;html5-filesystem adapter&lt;/a&gt;provided by the library. When we tested the app inside Chrome, everything works fine. However, as soon as the application is deployed to the device, Lawnchair started to throw exceptions saying &amp;ldquo;No valid adapter&amp;rdquo;. After looking at the source code, we noticed that the adapter tries to get a reference of the file system &lt;a href=&#34;https://github.com/brianleroux/lawnchair/blob/master/src/adapters/html5-filesystem.js#L14&#34;&gt;as soon as it&amp;rsquo;s loaded&lt;/a&gt;. However, when running on the device, the file system may not ready at that point.&lt;/p&gt;

&lt;p&gt;To fix this issue, we have to make sure the adapter will not try to reference the file system on file load, but rather do that inside a function and then call that function when Cordova is ready. If you are interested, you can see the updated version &lt;a href=&#34;https://gist.github.com/weili-feedhenry/33cede7faf01fe81c695&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This issue is not specific to the API file, but any other Cordova APIs too. So when using third-party libraries, if you think that it&amp;rsquo;s possibly using Cordova APIs, it will be worth the effort to check the source code and make sure Cordova APIs are only called after the &amp;ldquo;deviceready&amp;rdquo; event is emitted.&lt;/p&gt;

&lt;h2 id=&#34;icloud-backup&#34;&gt;iCloud backup&lt;/h2&gt;

&lt;p&gt;This is an iOS specific issue. On iOS, if iCloud backup is turned on, according to Apple&amp;rsquo;s &lt;a href=&#34;https://developer.apple.com/icloud/documentation/data-storage/index.html&#34;&gt;data storage guidelines&lt;/a&gt;, everything in the app&amp;rsquo;s home directory will be backed up, with the exception of the application bundle itself, the caches directory and the temp directory. If the app is going to be submitted to the App Store, one of the validation steps is to make sure only the data generated by the user is allowed to be backed up. If the application saves some data that is not generated by the user and tries to back up to iCloud, it will fail the validation and will be rejected.&lt;/p&gt;

&lt;p&gt;If you are using Cordova File API version &amp;lt; 1.2, all the files created by default will be allowed to back up by iCloud and that may cause surprises!&lt;/p&gt;

&lt;p&gt;For example, in one of the apps we have developed, we tried to download some content data for the app on startup and save the data onto the file system using the Cordova File API. We never thought this could be an issue until we submitted the app to App Store and got rejected. The reason the app got rejected is because of this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.23: Apps must follow the iOS Data Storage Guidelines or they will be rejected&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After reading the data storage guidelines (BTW, if you haven&amp;rsquo;t read it, you should &lt;a href=&#34;https://developer.apple.com/icloud/documentation/data-storage/index.html&#34;&gt;read it now&lt;/a&gt;), we realised the mistake we made. Luckily, the fix is quite easy - Cordova File API has &lt;a href=&#34;https://cordova.apache.org/docs/en/3.0.0/cordova_file_file.md.html#FileEntry&#34;&gt;provided a way&lt;/a&gt; to prevent the file from being backed up:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;entry.setMetadata(success, fail, { &amp;quot;com.apple.MobileBackup&amp;quot;: 1});&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But that&amp;rsquo;s not all. If your app saves non-user-generated data using local storage or websql, you should be careful too. By default, those files will be backed up to iCloud as well! Have a look at the config.xml file in your Cordova, you should see there is this preference:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;preference name=&amp;quot;BackupWebStorage&amp;quot; value=&amp;quot;cloud&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The value &amp;ldquo;cloud&amp;rdquo; means the web storage will be backed up. If that&amp;rsquo;s not what you want, make sure change that value to &amp;ldquo;local&amp;rdquo; (iTunes back up only) or &amp;ldquo;none&amp;rdquo; (No backup at all).&lt;/p&gt;

&lt;p&gt;If you are using the latest version (v1.2) of the Cordova File API, you need to know that there are some &lt;a href=&#34;https://github.com/apache/cordova-plugin-file/blob/master/doc/index.md&#34;&gt;significant changes&lt;/a&gt;. One of the important changes is that you will have direct access to some pre-created and useful directories inside javascript. E.g., in your app code, you can do&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
var syncedDataDir = cordova.file.syncedDataDirectory; 
var dataDir = cordova.file.dataDirectory;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;then if the data created should not be backed up, make sure it is saved inside the dataDir instead of the syncedDataDir.&lt;/p&gt;

&lt;p&gt;This rule applies to native iOS apps as well - you need to make sure only user-generated data is allowed to backup to iCloud. To prevent data from being backed up to iCloud in Objective-C, see &lt;a href=&#34;https://developer.apple.com/library/ios/qa/qa1719/_index.html&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;know-the-quirks&#34;&gt;Know the quirks&lt;/h2&gt;

&lt;p&gt;Even though Cordova tries its best to implement the same File API accross all the mobile platforms, there are still a few quirks due to native API constraints or performance concerns. All these quirks are listed on the &lt;a href=&#34;http://cordova.apache.org/docs/en/3.3.0/cordova_file_file.md.html#File&#34;&gt;Cordova File API documentation page&lt;/a&gt;. You should read the documentation to have an idea about these quirks for each platform. It may save you some time when you come across a problem and you know it&amp;rsquo;s a quirk for a particular platform already.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When using Cordova APIs, always make sure the APIs are called after Cordova is ready. If possible, always use the latest version of the Cordva File API and specify where the file data should be saved clearly. Think about iCloud backup if your apps are targeting iOS platform. Knowing the quirks of the APIs could save you some valuable time during development.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>